{"version":3,"sources":["utils/utils.js","components/CountryCard.js","components/CountryList.js","App.js","index.js"],"names":["formatNumber","number","toLocaleString","maximumFractionDigits","formatDate","date","Date","CountryCard","country","className","src","countryInfo","flag","alt","continent","population","updated","active","activePerOneMillion","cases","casesPerOneMillion","critical","criticalPerOneMillion","deaths","deathsPerOneMillion","recovered","recoveredPerOneMillion","tests","testsPerOneMillion","todayCases","todayDeaths","todayRecovered","CountryList","countries","handleCountryClick","useState","filteredCountries","setFilteredCountries","countryDomNodes","type","onChange","event","value","target","toLowerCase","filtered","filter","includes","name","placeholder","map","idx","onMouseEnter","gsap","to","opacity","scale","handleMouseEnter","onMouseLeave","handleMouseLeave","onMouseMove","elem","x","clientX","offsetWidth","y","clientY","offsetHeight","duration","handleMouseMove","onClick","slice","xmlns","viewBox","d","ref","e","iso3","App","setCountries","activeCountry","setActiveCountry","isRandomized","setIsRandomized","useEffect","axios","get","then","response","filteredData","data","getRandomCountry","catch","error","console","log","randomizedCountry","Math","floor","random","length","window","scrollTo","top","left","behavior","app","document","getElementById","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.91cd8c71.chunk.js","sourcesContent":["const formatNumber = (number) => {\n  return number.toLocaleString(\"en-US\", { maximumFractionDigits: 2 });\n};\n\nconst formatDate = (date) => {\n  return new Date(date).toLocaleString(\"en-GB\");\n};\n\nexport { formatNumber, formatDate };\n","import React from \"react\";\nimport { formatDate, formatNumber } from \"../utils/utils\";\n\nconst CountryCard = ({ country }) => {\n  return (\n    <div className=\"country-display\">\n      <div className=\"country-display__top\">\n        <figure className=\"country-display__flag\">\n          <img src={country.countryInfo.flag} alt={country.country} />\n        </figure>\n        <div className=\"country-display__general-details\">\n          <p className=\"country-display__country\">{country.country}</p>\n          <div className=\"country-display__continent\">\n            <p className=\"country-display__eyebrow\">Continent</p>\n            {country.continent}\n          </div>\n          <div className=\"country-display__population\">\n            <p className=\"country-display__eyebrow\">Population</p>\n            {formatNumber(country.population)}\n          </div>\n          <div className=\"country-display__last-updated\">\n            <p className=\"country-display__eyebrow\">Updated at</p>\n            {formatDate(country.updated)}\n          </div>\n        </div>\n      </div>\n      <div className=\"country-display__bottom\">\n        <div className=\"country-display__box active\">\n          <p className=\"country-display__box-title\">Total Active</p>\n          <div className=\"country-display__box-stat\">\n            {formatNumber(country.active)}\n          </div>\n        </div>\n        <div className=\"country-display__box active per_million\">\n          <p className=\"country-display__box-title\">Active per million</p>\n          <div className=\"country-display__box-stat\">\n            {country.activePerOneMillion}\n          </div>\n        </div>\n        <div className=\"country-display__box cases\">\n          <p className=\"country-display__box-title\">Total Cases</p>\n          <div className=\"country-display__box-stat\">\n            {formatNumber(country.cases)}\n          </div>\n        </div>\n        <div className=\"country-display__box cases per_million\">\n          <p className=\"country-display__box-title\">Cases per million</p>\n          <div className=\"country-display__box-stat\">\n            {formatNumber(country.casesPerOneMillion)}\n          </div>\n        </div>\n        <div className=\"country-display__box critical\">\n          <p className=\"country-display__box-title\">Critical Condition</p>\n          <div className=\"country-display__box-stat\">\n            {formatNumber(country.critical)}\n          </div>\n        </div>\n        <div className=\"country-display__box critical per_million\">\n          <div className=\"country-display__box-title\">Critical per million</div>\n          <div className=\"country-display__box-stat\">\n            {country.criticalPerOneMillion}\n          </div>\n        </div>\n        <div className=\"country-display__box deaths\">\n          <p className=\"country-display__box-title\">Total Deaths</p>\n          <div className=\"country-display__box-stat\">\n            {formatNumber(country.deaths)}\n          </div>\n        </div>\n        <div className=\"country-display__box deaths per_million\">\n          <p className=\"country-display__box-title\">Deaths per million</p>\n          <div className=\"country-display__box-stat\">\n            {country.deathsPerOneMillion}\n          </div>\n        </div>\n        <div className=\"country-display__box recovered\">\n          <p className=\"country-display__box-title\">Total Recovered</p>\n          <div className=\"country-display__box-stat\">\n            {formatNumber(country.recovered)}\n          </div>\n        </div>\n        <div className=\"country-display__box recovered per_million\">\n          <p className=\"country-display__box-title\">Recovered per million</p>\n          <div className=\"country-display__box-stat\">\n            {country.recoveredPerOneMillion}\n          </div>\n        </div>\n        <div className=\"country-display__box tests\">\n          <p className=\"country-display__box-title\">Total Tests</p>\n          <div className=\"country-display__box-stat\">\n            {formatNumber(country.tests)}\n          </div>\n        </div>\n        <div className=\"country-display__box tests per_million\">\n          <p className=\"country-display__box-title\">Tests per million</p>\n          <div className=\"country-display__box-stat\">\n            {country.testsPerOneMillion}\n          </div>\n        </div>\n        <div className=\"country-display__box cases_today\">\n          <p className=\"country-display__box-title\">Cases today</p>\n          <div className=\"country-display__box-stat\">\n            {formatNumber(country.todayCases)}\n          </div>\n        </div>\n        <div className=\"country-display__box deaths_today\">\n          <p className=\"country-display__box-title\">Deaths today</p>\n          <div className=\"country-display__box-stat\">\n            {formatNumber(country.todayDeaths)}\n          </div>\n        </div>\n        <div className=\"country-display__box recovered_today\">\n          <p className=\"country-display__box-title\">Recovered today</p>\n          <div className=\"country-display__box-stat\">\n            {formatNumber(country.todayRecovered)}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CountryCard;\n","import React, { useState } from \"react\";\nimport gsap from \"gsap\";\nimport { formatDate, formatNumber } from \"../utils/utils\";\n\nconst CountryList = ({ countries, handleCountryClick }) => {\n  const [filteredCountries, setFilteredCountries] = useState(countries);\n  const countryDomNodes = [];\n\n  const handleMouseEnter = (idx) => {\n    gsap.to(countryDomNodes[idx], { opacity: 0.8, scale: 1 });\n  };\n\n  const handleMouseLeave = (idx) => {\n    gsap.to(countryDomNodes[idx], { opacity: 0, scale: 0 });\n  };\n\n  const handleMouseMove = (event, idx) => {\n    const elem = countryDomNodes[idx];\n    gsap.to(elem, {\n      x: event.clientX - elem.offsetWidth / 2,\n      y: event.clientY - elem.offsetHeight / 2,\n      duration: 0.25,\n    });\n  };\n\n  const handleChange = (event) => {\n    const value = event.target.value.toLowerCase();\n    if (value && value !== \"\") {\n      const filtered = countries.filter((country) => {\n        return country.country.toLowerCase().includes(value);\n      });\n      setFilteredCountries(filtered);\n    } else {\n      setFilteredCountries(countries);\n    }\n  };\n\n  return (\n    <div className=\"country-listing\">\n      <input\n        className=\"country-listing__search\"\n        type=\"text\"\n        onChange={handleChange}\n        name=\"country\"\n        placeholder=\"Search By Country\"\n      ></input>\n      {filteredCountries &&\n        filteredCountries.map((country, idx) => (\n          <button\n            className=\"country-card\"\n            key={country.countryInfo.iso3}\n            onMouseEnter={() => handleMouseEnter(idx)}\n            onMouseLeave={() => handleMouseLeave(idx)}\n            onMouseMove={(event) => handleMouseMove(event, idx)}\n            onClick={() => handleCountryClick(country)}\n          >\n            <p className=\"country-card__count\">\n              {idx < 10 ? (\"0\" + (idx + 1)).slice(-2) : idx}\n            </p>\n            <p className=\"country-card__label\">{country.country}</p>\n            <div className=\"country-card__info\">\n              <p className=\"country-card__continent\">\n                <span>Continent:</span>\n                {country.continent}\n              </p>\n              <p className=\"country-card__population\">\n                <span>Population:</span>\n                {formatNumber(country.population)}\n              </p>\n              <p className=\"country-card__updated\">\n                <span>Last Update:</span>\n                {formatDate(country.updated)}\n              </p>\n            </div>\n            <div className=\"country-card__trigger\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\">\n                <path d=\"M214.6 41.4c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 141.2V448c0 17.7 14.3 32 32 32s32-14.3 32-32V141.2L329.4 246.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-160-160z\" />\n              </svg>\n            </div>\n            <div className=\"country-card__cursor\">\n              <img\n                ref={(e) => (countryDomNodes[idx] = e)}\n                src={country.countryInfo.flag}\n                className=\"country-card__flag\"\n                alt=\"\"\n              ></img>\n            </div>\n          </button>\n        ))}\n    </div>\n  );\n};\n\nexport default CountryList;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport CountryCard from \"./components/CountryCard\";\nimport CountryList from \"./components/CountryList\";\n\nimport \"./styles/main.scss\";\n\nconst App = () => {\n  const [countries, setCountries] = useState([]);\n  const [activeCountry, setActiveCountry] = useState(null);\n  const [isRandomized, setIsRandomized] = useState(true);\n\n  useEffect(() => {\n    axios\n      .get(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => {\n        const filteredData = response.data.filter((country) => {\n          return country.countryInfo.iso3 !== null;\n        });\n        setCountries(filteredData);\n        getRandomCountry(filteredData);\n      })\n      .catch((error) => console.log(error));\n  }, []);\n\n  const getRandomCountry = (countries) => {\n    const generateRandomInt = Math.floor(Math.random() * countries.length);\n    const randomizedCountry = countries[generateRandomInt];\n    setActiveCountry(randomizedCountry);\n  };\n\n  const handleCountryClick = (country) => {\n    if (isRandomized) {\n      setIsRandomized(false);\n    }\n    setActiveCountry(country);\n    window.scrollTo({ top: 0, left: 0, behavior: \"smooth\" });\n  };\n\n  return (\n    <div className=\"covid-tracker\">\n      <div className=\"covid-tracker__section covid-tracker__section--display\">\n        <div className=\"covid-tracker__section-inner\">\n          {isRandomized && (\n            <div className=\"covid-tracker__section-intro\">\n              <p className=\"covid-tracker__section-title\">Country Card</p>\n              <p className=\"covid-tracker__section-desc\">\n                Random country has been displayed as an example, view\n                instructions below to display specific country of your choice.\n              </p>\n            </div>\n          )}\n          {activeCountry ? (\n            <CountryCard country={activeCountry} />\n          ) : (\n            <p className=\"loading\">Loading Data...</p>\n          )}\n        </div>\n      </div>\n\n      <div className=\"covid-tracker__section covid-tracker__section--listing\">\n        <div className=\"covid-tracker__section-inner\">\n          <div className=\"covid-tracker__section-intro\">\n            <p className=\"covid-tracker__section-title\">Country Listing</p>\n            <p className=\"covid-tracker__section-desc\">\n              Click on the specific country name to view all the details about\n              the country.\n            </p>\n          </div>\n          {countries.length ? (\n            <CountryList\n              countries={countries}\n              handleCountryClick={handleCountryClick}\n            />\n          ) : (\n            <p className=\"loading\">Loading Data...</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst app = document.getElementById(\"root\");\nconst root = createRoot(app);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}